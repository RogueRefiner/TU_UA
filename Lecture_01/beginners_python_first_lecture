{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "26c4bc51",
   "metadata": {},
   "source": [
    "# Python & Machine Learning — First Steps\n",
    "\n",
    "Welcome! This notebook is designed for beginners (and friendly returners 😊).\n",
    "You will **run tiny pieces of code**, read short explanations, and fix common mistakes.\n",
    "\n",
    "**How to use this notebook**\n",
    "- Run one cell at a time (Shift+Enter).\n",
    "- If something breaks, **read the top line of the error**. That first line usually tells you what's wrong.\n",
    "- Typing matters: `\"2\"` (a string) is different from `2` (a number), and `print` is different from `prin`.\n",
    "- When you see `???`, replace it with your answer.\n",
    "\n",
    "> Tip: It’s normal to make mistakes. We learn by debugging!"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1125faef",
   "metadata": {},
   "source": [
    "## 1) Running Python & Your First Program\n",
    "\n",
    "**Theory (super short):**\n",
    "- Python code runs **line by line**.\n",
    "- `print(...)` shows text or values on the screen.\n",
    "- `#` starts a **comment** (notes for humans, ignored by Python).\n",
    "- `'''` start and end **multiline comments**\n",
    "- Errors (called **tracebacks**) look scary, but the **first line** usually points to the problem.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a4392a67",
   "metadata": {},
   "source": [
    "### Common beginner mistakes\n",
    "- Missing closing quotes: `print(\"Hello)` → **SyntaxError**.\n",
    "- Misspelling `print` as `prin`.\n",
    "- Mixing straight quotes with curly quotes copied from documents.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "34ecc046",
   "metadata": {},
   "source": [
    "### Exercise 1 — Fill in\n",
    "Create a file `hello.py` in your head or just run this cell. Replace `???` so it prints **Hello, Python!**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b08f2b59",
   "metadata": {},
   "outputs": [],
   "source": [
    "print(\"Hello World\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "77b037ff",
   "metadata": {},
   "outputs": [],
   "source": [
    "# hello.py (simulated here)\n",
    "print(???)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "43df7401",
   "metadata": {},
   "source": [
    "### Exercise 2 — Predict the output"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1f1d32b7",
   "metadata": {},
   "outputs": [],
   "source": [
    "print(\"Hello\") \n",
    "print(\"World\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9055a559",
   "metadata": {},
   "source": [
    "**Explanation:** Two separate `print` calls mean two lines of output."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d8e433b",
   "metadata": {},
   "source": [
    "### Exercise 3 — Fix the bug\n",
    "Make it print `Hello, Ukraine!`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "05532604",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Fix the quotes!\n",
    "print(\"Hello, Ukraine!)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4a1a7bcd",
   "metadata": {},
   "source": [
    "### Exercise 4 — From scratch\n",
    "Print your name on one line and your city on the next line."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5a89f81c",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Your code here\n",
    "# Example:\n",
    "# print(\"Ivanna\")\n",
    "# print(\"Kyiv\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c623f2f",
   "metadata": {},
   "source": [
    "### Exercise 5 — Banner"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b3fe87e0",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Print a banner like:\n",
    "# ------------------------------\n",
    "# Welcome to Python\n",
    "# ------------------------------\n",
    "# Your code here\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6703f393",
   "metadata": {},
   "source": [
    "## 2) Values, Variables & Basic Types\n",
    "\n",
    "**Theory (short):**\n",
    "- Variables **store values**: `age = 30`\n",
    "- Types: `int` (whole numbers), `float` (decimals), `str` (text), `bool` (True/False)\n",
    "- Convert types with `int()`, `float()`, `str()`; check with `type(x)`.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "674eee42",
   "metadata": {},
   "source": [
    "### Common beginner mistakes\n",
    "- Trying to add a string and a number: `\"I am \" + 30` → use `\"I am \" + str(30)`.\n",
    "- Using spaces or starting with digits in names: `2name = ...` (invalid).\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0745a171",
   "metadata": {},
   "source": [
    "### Exercise set"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "12c8e5d7",
   "metadata": {},
   "source": [
    "### Exercise 1 - Assign your age to the variable and print it "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "45b4924c",
   "metadata": {},
   "outputs": [],
   "source": [
    "age = ???\n",
    "print(age)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dae4612c",
   "metadata": {},
   "source": [
    "### Exercise 2 - Predict the output"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7651749b",
   "metadata": {},
   "outputs": [],
   "source": [
    "x = 5\n",
    "x = x + 1\n",
    "print(x)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "486d4199",
   "metadata": {},
   "source": [
    "### Exercise 2 - greeting with first and last name using a single print statement"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4efb5d6e",
   "metadata": {},
   "outputs": [],
   "source": [
    "hello = \"Hello\"\n",
    "print(hello, \"World\")\n",
    "print(hello + \" World\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2b330705",
   "metadata": {},
   "outputs": [],
   "source": [
    "first_name = ???\n",
    "last_name = ???\n",
    "print(???)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bafe5f5b",
   "metadata": {},
   "source": [
    "### Exercise 3 - Type Conversions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2395301b",
   "metadata": {},
   "outputs": [],
   "source": [
    "pi = 3.14\n",
    "print(\"value: \", pi, \" type: \", type(pi))\n",
    "\n",
    "pi = int(pi)\n",
    "print(\"value: \", pi, \" type: \", type(pi))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "030c89ac",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Convert apples into string\n",
    "apples = 4\n",
    "print(\"I have \" + ??? + \" apples\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "49384425",
   "metadata": {},
   "source": [
    "### Exercise 4 - Predict types"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f900da42",
   "metadata": {},
   "outputs": [],
   "source": [
    "a = 3\n",
    "b = 3.0\n",
    "c = \"3\"\n",
    "print(type(a))\n",
    "print(type(b))\n",
    "print(type(c))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d74dc958",
   "metadata": {},
   "source": [
    "### Exercise 5 - Print 15\n",
    "Change the code snippet below so it prints 15"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9b2014f7",
   "metadata": {},
   "outputs": [],
   "source": [
    "x = \"10\"\n",
    "y = 5\n",
    "print(x + y)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "69fb4ac6",
   "metadata": {},
   "source": [
    "### Exercise 6 — Numbers vs strings"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "79ab770b",
   "metadata": {},
   "outputs": [],
   "source": [
    "print(2 + 2)\n",
    "print(\"2\" + \"2\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "993b6db3",
   "metadata": {},
   "source": [
    "### Reassign variables\n",
    "It is possible to reassign variables as often as we want. \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2879e15f",
   "metadata": {},
   "outputs": [],
   "source": [
    "apples = 3\n",
    "print(\"apples: \", apples)\n",
    "apples = 5\n",
    "print(\"apples: \", apples)\n",
    "apples = 7\n",
    "print(\"apples: \", apples)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3aba01ea",
   "metadata": {},
   "source": [
    "## 3) Expressions & Operators\n",
    "\n",
    "**Theory:**\n",
    "- Arithmetic: `+ - * / // % **`\n",
    "- Comparison: `< <= > >= == !=`\n",
    "- Logical: `and or not`\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "363a118e",
   "metadata": {},
   "source": [
    "### Common beginner mistakes\n",
    "- Confusing `/` (true division) with `//` (floor division).\n",
    "- Writing `=` (assignment) when you mean `==` (comparison).\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e185e8db",
   "metadata": {},
   "outputs": [],
   "source": [
    "pi = 3.14\n",
    "apples = 3\n",
    "pears = 2\n",
    "\n",
    "# Addition \n",
    "addition1 = pi + apples\n",
    "addition2 = pears + apples\n",
    "print(\"Addition1: \", addition1)\n",
    "print(\"Addition2: \", addition2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d6100b57",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Subtraction \n",
    "subtraction1 = pi - apples\n",
    "print(\"Subtraction1: \", subtraction1)\n",
    "subtraction2 = apples - pears\n",
    "print(\"Subtraction2: \", subtraction2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "036002d5",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Division\n",
    "division1 = pi / apples\n",
    "division2 = pears / apples\n",
    "print(\"Division1: \", division1)\n",
    "print(\"Division2: \", division2)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "16ceba36",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Multiplication\n",
    "multiplication1 = pi * apples\n",
    "multiplication2 = apples * apples\n",
    "print(\"Multiplication1: \", multiplication1)\n",
    "print(\"Multiplication2: \", multiplication2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ff0c0f14",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Floor division\n",
    "floor_division1 = pi // apples\n",
    "floor_division2 = pears // apples\n",
    "print(\"Floor_division1: \", floor_division1)\n",
    "print(\"Floor_division2: \", floor_division2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "98a5f87b",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Modulo\n",
    "modulo1 = pi % apples\n",
    "modulo2 = apples % pears\n",
    "print(\"Modulo1: \", modulo1)\n",
    "print(\"Modulo2: \", modulo2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "55396491",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Exponentiation\n",
    "exponentiation1 = pi ** pears\n",
    "exponentiation2 = apples ** pears\n",
    "print(\"Exponentiation1: \", exponentiation1)\n",
    "print(\"Exponentiation2: \", exponentiation2)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ea6a20bb",
   "metadata": {},
   "source": [
    "### Exercise 1 - Predict"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f421a7b0",
   "metadata": {},
   "outputs": [],
   "source": [
    "a = 7\n",
    "b = 2\n",
    "\n",
    "print(a / b)\n",
    "print(a // b)\n",
    "print(a % b)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c3e82c84",
   "metadata": {},
   "source": [
    "### Exercise 2 - Check if n is even"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9efd3a07",
   "metadata": {},
   "outputs": [],
   "source": [
    "n = 14\n",
    "is_even = ???  # use %\n",
    "print(is_even)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c57cc97c",
   "metadata": {},
   "source": [
    "### Exercise 3 - Use of arithmetic expressions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f12c2149",
   "metadata": {},
   "outputs": [],
   "source": [
    "# print the total cost\n",
    "price = 9.99 \n",
    "quantity = 3  \n",
    "total_cost = ???"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "feb2ec36",
   "metadata": {},
   "outputs": [],
   "source": [
    "kilometers = 42.195\n",
    "hours = 3.5\n",
    "km_per_hour = ???"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c41b5bd",
   "metadata": {},
   "source": [
    "### Exercise 4 - Evaluation Order"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4b864a4f",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Modify the calculation below so result is 11\n",
    "result = 2 + 3 * 3\n",
    "result = ???       # change using parentheses only\n",
    "print(result)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "64eee5e0",
   "metadata": {},
   "source": [
    "### Exercise 5 - Use of logical expressions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c1dc5c51",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Voting is possible if the person is at least 18 and a citizen\n",
    "age = 20\n",
    "citizen = True\n",
    "can_vote = ??? and ???\n",
    "print(can_vote)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c01ca3a0",
   "metadata": {},
   "outputs": [],
   "source": [
    "# stay_home should be true if it is raining and you don't have an umbrella\n",
    "is_raining = True\n",
    "has_umbrella = False\n",
    "stay_home = ??? and not ???\n",
    "print(stay_home)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8e650297",
   "metadata": {},
   "outputs": [],
   "source": [
    "# can_enter should be true if either condition is true\n",
    "has_ticket = False\n",
    "is_vip = True\n",
    "can_enter = ??? or ???\n",
    "print(can_enter)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "59e250e3",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Predict True/False\n",
    "print(3 < 5 and 2 > 10)\n",
    "print(3 < 5 or 2 > 10)\n",
    "print(not (3 < 5))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7b5487de",
   "metadata": {},
   "source": [
    "## 4) Functions\n",
    "**Theory:**\n",
    "- Functions group code into reusable blocks.\n",
    "- Define a function with def and call it by name\n",
    "- Functions can return values using return\n",
    "- Parameters are input variables; you can pass arguments when calling the function.\n",
    "- Built-in functions: len(), print(), range(), int(), etc.\n",
    "\n",
    "**Common beginner mistakes**\n",
    "- Forgetting parentheses when calling a function (greet instead of greet() → returns the function object).\n",
    "- Not using return when a value is expected.\n",
    "- Mixing up parameters (in definition) and arguments (in call).\n",
    "- Shadowing built-in function names (e.g. naming your variable list or sum).\n",
    "- Forgetting indentation or inconsistent spacing in function bodies."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ba9eb66e",
   "metadata": {},
   "source": [
    "### Exercise 1 - Use custom implemented functions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bab2547e",
   "metadata": {},
   "outputs": [],
   "source": [
    "def greet(name):\n",
    "    print(f\"Hello {name}\")\n",
    "\n",
    "greet(\"Alice\")\n",
    "\n",
    "def add(a, b):\n",
    "    return a + b\n",
    "\n",
    "print(add(2, 3))\n",
    "print(add(3, 3))\n",
    "\n",
    "# use the greet function with your name\n",
    "???\n",
    "\n",
    "# use the add function with two numbers of your choice\n",
    "???"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a5d22d84",
   "metadata": {},
   "source": [
    "### Exercise 2 - Write your own function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "37b9aa07",
   "metadata": {},
   "outputs": [],
   "source": [
    "# implement a function of your choice (e.g. subtraction) and use it"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d2b8cfba",
   "metadata": {},
   "source": [
    "## 5) Strings & f-strings\n",
    "\n",
    "**Theory:**\n",
    "- Strings are text: `\"hello\"`.\n",
    "- Use f-strings to mix text and variables: `f\"Hello {name}\"`.\n",
    "- Useful functions: `len(s)`, `s.lower()`, `s.upper()`, `s.strip()`, `s.replace(a, b)`, `s.title()`\n",
    "- Strings are multiple connected chars. `Hello` is one string with `5` chars.\n",
    "- Indexing: `s[0]` is first char; `s[-1]` last; slices `s[:3]`, `s[2:]`.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "da066da6",
   "metadata": {},
   "source": [
    "### Common beginner mistakes\n",
    "- Forgetting `f` in `f\"... {name} ...\"`.  \n",
    "- Using the wrong index (`s[len(s)]` is **out of range**; last index is `len(s)-1` or simply `s[-1]`).\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ff341948",
   "metadata": {},
   "source": [
    "### Exercise 1 - f-strings"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "833948cd",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Enter your name and change the greeting f-string to print \"Hello, <your_name>!\"\n",
    "name = ???\n",
    "greeting = f\"Hello, ???!\"\n",
    "print(greeting)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c5094b03",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Print \"Kyiv, Ukraine\" via f-string\n",
    "city = \"Kyiv\"\n",
    "country = \"Ukraine\"\n",
    "print(???)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "19c33f0d",
   "metadata": {},
   "outputs": [],
   "source": [
    "# f-string lesson number\n",
    "lesson = 1\n",
    "print(f\"Lesson {lesson}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ddc171bb",
   "metadata": {},
   "source": [
    "### Exercise 2 - Use of in-built functions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fbcf28a5",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Predict the result of the print statement\n",
    "s = \" Python \"\n",
    "print(len(s))\n",
    "\n",
    "s = s.strip()\n",
    "print(len(s))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e878abdb",
   "metadata": {},
   "source": [
    "Why are the two results different? <br>\n",
    "Tip: Hover over the `strip()` function and read its documentation "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "04f7793c",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Replace AI with ML\n",
    "text = \"I study AI every day\"\n",
    "text = text.???(\"AI\", \"ML\")\n",
    "print(text)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "43f8df5e",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Title case\n",
    "title = \"introduction to python\"\n",
    "print(title.title())\n",
    "\n",
    "# transform upper_case into an upper_case string\n",
    "upper_case = \"hello world\"\n",
    "print(upper_case.???)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ac75f919",
   "metadata": {},
   "source": [
    "### Exercise 3 - Slicing of Strings"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b34d6580",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Take a look at the print statement\n",
    "s = \"Ukraine\"\n",
    "print(s[1], s[-2])\n",
    "\n",
    "# Print the first and last character of s\n",
    "# print(s[???], s[???])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "832514a3",
   "metadata": {},
   "source": [
    "Take a look at the print statements <br>\n",
    "Remember indexing starts at 0 and not at 1 <br>\n",
    "Slicing examples: [from index:], [:until index], [from index:until index] <br>\n",
    "the from index is included in the result, while the until index is excluded <br>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ae4dcee6",
   "metadata": {},
   "outputs": [],
   "source": [
    "s = \"abcde\"\n",
    "print(s[:3])\n",
    "print(s[2:])\n",
    "print(s[2:4])\n",
    "\n",
    "# print \"bcd\"\n",
    "# print(s[???])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6705a827",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Fix bug (should print Hello, Taras)\n",
    "name = \"Taras\"\n",
    "print(\"Hello, {name}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "93f3aa58",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Chaining of functions\n",
    "email = \" student@example.com  \"\n",
    "clean = email.strip().lower()\n",
    "print(clean)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dab81df8",
   "metadata": {},
   "source": [
    "## 6) Decisions with `if`/`elif`/`else`\n",
    "\n",
    "**Theory:**\n",
    "- `if` runs a block when a condition is `True`.\n",
    "- `elif` checks another condition if the previous ones failed.\n",
    "- `else` runs when nothing matched.\n",
    "- **Indentation** (spaces) defines the block body.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f0c988b5",
   "metadata": {},
   "source": [
    "### Common beginner mistakes\n",
    "- Missing indentation after `if`.\n",
    "- Using `=` inside `if` instead of `==`.\n",
    "- Forgetting the colon `:` after `if`, `elif`, or `else`.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f4ad1227",
   "metadata": {},
   "source": [
    "### Exercise 1 - Modify or predict conditional statements"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "258f18dd",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Will the print statement be executed?\n",
    "# if it is not executed, change it so its executed\n",
    "# if it is executed, change it so its not executed anymore\n",
    "temp = 28\n",
    "if temp > 25:\n",
    "    print(\"Hot\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f21ab71d",
   "metadata": {},
   "source": [
    "Hint: You can use multiple logical expressions <br>\n",
    "e.g. 0 < x > 15"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ce260ced",
   "metadata": {},
   "outputs": [],
   "source": [
    "# print \"Teenager\" if age 13–19, else \"Not teenager\"\n",
    "def check_teenager(age):\n",
    "    if ???:\n",
    "        print(\"Teenager\")\n",
    "    else:\n",
    "        print(\"Not teenager\")\n",
    "\n",
    "check_teenager(???) # should print \"Teenager\"\n",
    "check_teenager(???) # should print \"Not teenager\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c22627af",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Predict\n",
    "def check_country(country):\n",
    "    if country == \"UA\":\n",
    "        print(\"Ukraine\")\n",
    "    elif country == \"AU\":\n",
    "        print(\"Austria\")\n",
    "    else: \n",
    "        print(\"Neither Ukraine nor Austria\")\n",
    "\n",
    "check_country(\"UA\") \n",
    "check_country(\"IT\")\n",
    "check_country(\"AU\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "01d1ac7f",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Predict\n",
    "def check_truth(n):\n",
    "    if n:\n",
    "        print(\"truthy\")\n",
    "    else:\n",
    "        print(\"falsy\")\n",
    "\n",
    "\n",
    "check_truth(-1)\n",
    "check_truth(0)\n",
    "check_truth(1)\n",
    "check_truth(2)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fbcd189a",
   "metadata": {},
   "source": [
    "Here is the commented explanation of the results from the check_truth function <br>\n",
    "Uncomment it after predicting the results <br>\n",
    "<!-- **Explanation:** Integers can be used to substitute boolean values.`0` is evaluated as **falsy** in Python. While all other numbers are evaulated truthy. -->"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d459d67f",
   "metadata": {},
   "source": [
    "score >= 90 -> A <br>\n",
    "90 > score >= 75 -> B <br>\n",
    "score < 75 -> C or below"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a75a7bb1",
   "metadata": {},
   "outputs": [],
   "source": [
    "# elif chain\n",
    "score = 72\n",
    "if score >= 90:\n",
    "    grade = \"A\"\n",
    "elif ???:\n",
    "    grade = \"B\"\n",
    "else:\n",
    "    grade = \"C or below\"\n",
    "print(grade)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a263f5ca",
   "metadata": {},
   "outputs": [],
   "source": [
    "# predict\n",
    "def check_time_of_the_day(time):\n",
    "    if time < 12:\n",
    "        print(\"Good morning\")\n",
    "    elif time <= 18:\n",
    "        print(\"Good afternoon\")\n",
    "    else:\n",
    "        print(\"Good evening\")\n",
    "\n",
    "check_time_of_the_day(23)\n",
    "check_time_of_the_day(11)\n",
    "check_time_of_the_day(15)\n",
    "check_time_of_the_day(18)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f5e8b738",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Combine conditions\n",
    "country = \"Ukraine\"\n",
    "language = \"Ukrainian\"\n",
    "if country == ??? and ??? == \"Ukrainian\":\n",
    "    print(\"Localized!\")\n",
    "else: \n",
    "    print(\"Unknown Localization!\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c57f38cd",
   "metadata": {},
   "outputs": [],
   "source": [
    "# predict \n",
    "password = \"abc123\"\n",
    "if len(password) < 6:\n",
    "    print(\"Weak\")\n",
    "else:\n",
    "    print(\"OK\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0c87ca1d",
   "metadata": {},
   "outputs": [],
   "source": [
    "# predict: == vs is \n",
    "def is_equal(a, b):\n",
    "    if a is b:\n",
    "        print(\"same object?\")\n",
    "    else: \n",
    "        print(\"definitely not the same object\")\n",
    "\n",
    "b = 10\n",
    "a = 10\n",
    "is_equal(a, b)\n",
    "is_equal(100, 1000)\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48bc7381",
   "metadata": {},
   "source": [
    "Here is the commented explanation of the results from the is_equal function <br>\n",
    "Uncomment it after predicting the results <br>\n",
    "\n",
    "<!-- **Explanation:** `==` asks “same value?”; `is` asks “same object in memory?”. Small integers may appear the same object due to Python's internal optimizations. Use `==` for comparisons. -->"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6b94b23f",
   "metadata": {},
   "outputs": [],
   "source": [
    "# predict: Even or odd\n",
    "n = 11\n",
    "if n % 2 == 0:\n",
    "    print(\"even\")\n",
    "else:\n",
    "    print(\"odd\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "61a88569",
   "metadata": {},
   "source": [
    "## 7) Pairs that look similar but act differently\n",
    "\n",
    "These build intuition about **types** and **operators**.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "01090f76",
   "metadata": {},
   "outputs": [],
   "source": [
    "print(2 + 2)\n",
    "print(\"2\" + \"2\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "64a6d7fb",
   "metadata": {},
   "source": [
    "Here is the commented explanation of the results <br>\n",
    "Uncomment it after predicting the results <br>\n",
    "\n",
    "<!-- Numbers add to **4**; strings concatenate to **\"22\"**.\n",
    "**Mistake to avoid:** `\"2\" + 2` → `TypeError`. -->"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3dc7051c",
   "metadata": {},
   "outputs": [],
   "source": [
    "print(5 * 2)\n",
    "print(\"5\" * 2)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "736adfcb",
   "metadata": {},
   "source": [
    "Here is the commented explanation of the results <br>\n",
    "Uncomment it after predicting the results <br>\n",
    "\n",
    "<!-- Numbers multiply; strings **repeat**. -->"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bfef662f",
   "metadata": {},
   "outputs": [],
   "source": [
    "# What happens with the second print statement. How can we fix it?\n",
    "\n",
    "print(10 - 3)\n",
    "print(\"10\" - \"3\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "343cef15",
   "metadata": {},
   "source": [
    "Here is the commented explanation of the results <br>\n",
    "Uncomment it after predicting the results <br>\n",
    "\n",
    "<!-- Second line errors: you can't subtract strings. Convert first: `int(\"10\") - int(\"3\")`. -->"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d032b54f",
   "metadata": {},
   "outputs": [],
   "source": [
    "print(10 / 3)\n",
    "print(10 // 3)\n",
    "print(11 // 3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4000a699",
   "metadata": {},
   "source": [
    "Here is the commented explanation of the results <br>\n",
    "Uncomment it after predicting the results <br>\n",
    "\n",
    "<!-- `/` is a division with a floating point as result; `//` is a floor division (rounded down to an int). -->"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "cdff92c4",
   "metadata": {},
   "outputs": [],
   "source": [
    "print(\"True\" == True)\n",
    "print(str(True) == \"True\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9194fafb",
   "metadata": {},
   "source": [
    "Here is the commented explanation of the results <br>\n",
    "Uncomment it after predicting the results <br>\n",
    "\n",
    "<!-- First compares a string to a boolean → `False`. Second compares two strings → `True`. -->"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e3700e6b",
   "metadata": {},
   "outputs": [],
   "source": [
    "print(\"apple\" < \"Banana\")\n",
    "print(\"Apple\" < \"banana\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a1f33a5b",
   "metadata": {},
   "source": [
    "Here is the commented explanation of the results <br>\n",
    "Uncomment it after predicting the results <br>\n",
    "\n",
    "<!-- Uppercase letters sort **before** lowercase in ASCII/Unicode. Case matters. -->"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b292709d",
   "metadata": {},
   "source": [
    "## 8) Tricky Reassignment Examples\n",
    "\n",
    "Reassignment means a variable gets a **new** value. Track it line by line!\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bff70fe0",
   "metadata": {},
   "source": [
    "### Exercise 1 - Reassignment of variables"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f1263206",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Predict the result\n",
    "# Afterwards you can remove the comments for the print statements to retrace the reassignments easier\n",
    "x = 5\n",
    "# print(x) \n",
    "x = x + 2\n",
    "# print(x) \n",
    "x = x * 3\n",
    "print(x) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "682a13cc",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Predict the result\n",
    "y = 10\n",
    "# print(y) \n",
    "y = y - 4\n",
    "# print(y) \n",
    "y = y / 2\n",
    "# print(y) \n",
    "y = y + y\n",
    "print(y)  # Why and where did the datatype of y change?"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f1d199a1",
   "metadata": {},
   "source": [
    "### Exercise 2 - Swapping Variables"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e46ae9c2",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Swapping variable - predict the result\n",
    "a = 3\n",
    "b = 7\n",
    "a = b\n",
    "b = a\n",
    "print(a, b)  # What went wrong? "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "895c30d1",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Correct swap in Python\n",
    "a, b = 3, 7\n",
    "a, b = b, a\n",
    "print(a, b)  "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "50693ef8",
   "metadata": {},
   "source": [
    "### Exercise 3 - Hidden Dependencies"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "29eee77c",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Predict the result\n",
    "count = 1\n",
    "total = count\n",
    "count = count + 1\n",
    "total = total + count\n",
    "print(total) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "487dd68b",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Predict the result\n",
    "x = 1\n",
    "x = x + x\n",
    "x = x * x\n",
    "x = x - 1\n",
    "print(x)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3701eba1",
   "metadata": {},
   "source": [
    "## 9) Truthiness & Booleans (Quick Look)\n",
    "\n",
    "**Theory:** In `if` checks, many values are treated as True/False:\n",
    "- `0`, `0.0`, `\"\"`, `[]`, `{}`, `None` → **False**\n",
    "- Almost everything else → **True**\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "95fb67d6",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Predict the results\n",
    "print(bool(0))\n",
    "print(bool(1))\n",
    "print(bool(\"0\"))  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e0544836",
   "metadata": {},
   "outputs": [],
   "source": [
    "print(bool([]))\n",
    "print(bool([0]))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "26754137",
   "metadata": {},
   "source": [
    "## 10) Loops\n",
    "- Loops repeat code multiple times.\n",
    "\n",
    "`for` loop → used to iterate over a sequence (like a list or string):\n",
    "```python\n",
    "for i in range(5):\n",
    "    print(i)\n",
    "```\n",
    "`while`loop → repeats while a condition is `True`:\n",
    "```python\n",
    "count = 0\n",
    "while count < 5:\n",
    "    print(count)\n",
    "    count += 1\n",
    "```\n",
    "\n",
    "- `break` stops the loop early; `continue` skips to the next iteration."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b53491ce",
   "metadata": {},
   "source": [
    "### Common beginner mistakes\n",
    "- Forgetting to update the loop variable in `while` loops → causes infinite loops.\n",
    "- Using `range()` incorrectly (e.g. `range(1,5)` goes 1–4, not 1–5).\n",
    "- Modifying a list while iterating over it — leads to unexpected results.\n",
    "- Misusing indentation (loop body must be indented).\n",
    "- Using `break` or `continue` outside of a loop → causes syntax errors."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a293e20c",
   "metadata": {},
   "source": [
    "### Exercise 1 - Predict the result"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "314c7faa",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Predict the result\n",
    "for i in range(5):\n",
    "    print(i)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ea011d92",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Predict the result\n",
    "for i in range(1, 5):\n",
    "    print(i)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2a258099",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Predict the result\n",
    "count = 0\n",
    "while count < 5:\n",
    "    print(count)\n",
    "    count += 1"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6cf6c9a9",
   "metadata": {},
   "source": [
    "### Exercise 2 - Write your own loops"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "cc7e1bcc",
   "metadata": {},
   "outputs": [],
   "source": [
    "# write a for loop that prints the number 1-9 and calculates the total\n",
    "total = 0\n",
    "for i in range(???):\n",
    "    ???\n",
    "\n",
    "print(total)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "71413253",
   "metadata": {},
   "outputs": [],
   "source": [
    "# write a while loop that counts down from 5 to 0\n",
    "count = 5\n",
    "while count > 0:\n",
    "    print(count)\n",
    "    count ???\n",
    "\n",
    "print(count)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ce3108b9",
   "metadata": {},
   "source": [
    "## 11) Additional Exercises\n",
    "\n",
    "Complete these before you finish:\n",
    "1. Write a program that checks if a number is even or odd `number`.  \n",
    "   If it's even, print `\"even\"`, else print `\"odd\"`.\n",
    "2. Using an f-string, print `\"Hello, <NAME>! You have N apples.\"` given `name` and `apples` variables.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "daf04e6c",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 1) Even/Odd\n",
    "number = 42 \n",
    "# your code here\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ad63dcfa",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 2) Greeting with f-string\n",
    "name = \"Andrii\"\n",
    "apples = 5\n",
    "# your code here\n"
   ]
  }
 ],
 "metadata": {
  "celltoolbar": "Tags",
  "kernelspec": {
   "display_name": ".venv",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
